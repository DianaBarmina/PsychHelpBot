import datetime
import psycopg2
from db import hash_user_id
import os
from dotenv import load_dotenv


load_dotenv()
DB_PARAMS = {
    "host": os.getenv("DB_HOST"),
    "port": os.getenv("DB_PORT"),
    "dbname": os.getenv("DB_NAME2"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
}


consent_text = (
    "üõ°Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ:\n\n"
    "üîê *–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è:*\n"
    "‚Ä¢ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ)\n"
    "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏ —ç–º–æ—Ü–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
    "‚Ä¢ –ü—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
    "üìä *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ:*\n"
    "‚Ä¢ –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
    "‚Ä¢ –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n\n"
    "üßæ *–ö–∞–∫ –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:*\n"
    "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
    "üë®‚Äçüíª *–ö—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø:* –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
    "–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
)


async def save_user_consent(user_id):
    hashed_id = hash_user_id(user_id)

    conn = psycopg2.connect(**DB_PARAMS)
    cursor = conn.cursor()

    cursor.execute("""
            SELECT consent_given FROM user_consents
            WHERE user_id = %s AND consent_given = TRUE
        """, (hashed_id,))

    cursor.execute("SELECT 1 FROM user_consents WHERE user_id = %s LIMIT 1", (hashed_id,))
    exists = cursor.fetchone() is not None

    if not exists:

        cursor.execute("""
            INSERT INTO user_consents (user_id, consent_given, consent_date)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id) DO UPDATE SET consent_given = TRUE, consent_date = EXCLUDED.consent_date
        """, (hashed_id, True, datetime.datetime.utcnow()))

        conn.commit()
        cursor.close()
        conn.close()


async def check_user_consent(user_id):
    hashed_id = hash_user_id(user_id)

    conn = psycopg2.connect(**DB_PARAMS)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT id FROM user_consents
        WHERE user_id = %s AND consent_given = TRUE
    """, (hashed_id,))

    result = cursor.fetchone()
    cursor.close()
    conn.close()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –∑–∞–ø–∏—Å–∏
    return None


async def delete_user_consent(user_id):
    hashed_id = hash_user_id(user_id)

    conn = psycopg2.connect(**DB_PARAMS)
    cursor = conn.cursor()

    cursor.execute("""
        DELETE FROM user_consents WHERE user_id = %s
    """, (hashed_id,))

    conn.commit()
    cursor.close()
    conn.close()
