import os
import torch
from transformers import Wav2Vec2FeatureExtractor, HubertForSequenceClassification
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from pydub import AudioSegment
from dotenv import load_dotenv
import soundfile as sf
import whisper
from mistralai_experiment import generate_response_for_emotion, classificate_emotions, generate_empathic_response
from tests_questionare import PHQ9_QUESTIONS, GAD7_QUESTIONS, Questionnaire, interpret_phq9, \
    interpret_gad7
from test_result import save_test_result, confirm_delete_tests_request, delete_test_results, \
    handle_delete_tests_callback, check_test_results_exist, create_tests_chart
from psychograph_profile import start_psychographic_profile, handle_profile_response, confirm_delete_profile,\
    handle_profile_delete_callback, get_formatted_profile_from_db, delete_profile_from_db, check_user_profile_exist
from save_emotions import save_emotions_to_db, handle_delete_emotions_callback, confirm_delete_emotions_request, \
    delete_user_emotions, check_emotions_exist, get_emotions_stats, create_emotions_chart
from voice_convert import convert_ogg_to_wav
from confidential import save_user_consent, check_user_consent, consent_text, delete_user_consent


AudioSegment.converter = "C:\\ffmpeg\\ffmpeg-7.1.1-essentials_build\\bin\\ffmpeg.exe"
AudioSegment.ffprobe = "C:\\ffmpeg\\ffmpeg-7.1.1-essentials_build\\bin\\ffprobe.exe"
os.environ["PATH"] += os.pathsep + r"C:\ffmpeg\ffmpeg-7.1.1-essentials_build\bin"

load_dotenv()
TELEBOT_API_TOKEN = os.getenv("TELEBOT_API_TOKEN")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained("xbgoose/hubert-large-speech-emotion-recognition-russian-dusha-finetuned")
model = HubertForSequenceClassification.from_pretrained("xbgoose/hubert-large-speech-emotion-recognition-russian-dusha-finetuned")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ speech-to-text
asr_model = whisper.load_model("tiny")

PHQ9 = Questionnaire("PHQ-9 (–î–µ–ø—Ä–µ—Å—Å–∏—è)", PHQ9_QUESTIONS, interpret_phq9)
GAD7 = Questionnaire("GAD-7 (–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å)", GAD7_QUESTIONS, interpret_gad7)

'''main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é")],
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å")],
        [KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å")],
        [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("/edit_privacy")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)'''

consent_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å", callback_data="consent_yes")]
])

revoke_consent_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚ùå –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="consent_revoke")]
])


def send_personalized_keyboard(is_checked):

    keyboard = [
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é")],
        [KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å")],
    ]

    if is_checked:
        keyboard.extend([
            [KeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å")],
            [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")],
            [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π")],
            [KeyboardButton("–ú–æ–∏ —ç–º–æ—Ü–∏–∏: –∏—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("–ú–æ–∏ —Ç–µ—Å—Ç—ã: –∏—Å—Ç–æ—Ä–∏—è")]
        ])

    keyboard.append([KeyboardButton("/edit_privacy")])
    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )

    return reply_markup


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    checked_user = await check_user_consent(user_id)
    print(checked_user)

    if checked_user:
        reply_keyboard = send_personalized_keyboard(is_checked=True)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üòä\n–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
            reply_markup=reply_keyboard
        )
        return
    else:
        reply_keyboard = send_personalized_keyboard(is_checked=False)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–∫–∞–∂—É —Ç–µ–±–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            reply_markup=reply_keyboard
        )

    await update.message.reply_text(
        consent_text,
        parse_mode="Markdown",
        reply_markup=consent_keyboard
    )


async def edit_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if await check_user_consent(user_id):
        await update.message.reply_text(
            f"‚úÖ –í—ã —Ä–∞–Ω–µ–µ —É–∂–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:\n\n{consent_text}",
            parse_mode="Markdown",
            reply_markup=revoke_consent_keyboard
        )
    else:
        await update.message.reply_text(
            f"–í—ã –µ—â—ë –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n\n{consent_text}",
            parse_mode="Markdown",
            reply_markup=consent_keyboard
        )


def transcribe_speech(audio_path):
    result = asr_model.transcribe(audio_path, language="ru")
    return result["text"]


def predict_emotion(audio_path):
    waveform, sr = sf.read(audio_path)
    waveform = torch.tensor(waveform).float()

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ (—Å—Ç–µ—Ä–µ–æ), –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
    if waveform.ndim > 1:
        waveform = waveform.mean(dim=1)

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ
    inputs = feature_extractor(waveform, sampling_rate=sr, return_tensors="pt", padding=True)

    with torch.no_grad():
        logits = model(**inputs).logits

    predicted_class_id = int(torch.argmax(logits, dim=-1))
    predicted_label = model.config.id2label[predicted_class_id]
    return predicted_label


async def send_questionnaire_question1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    questionnaire = context.user_data['test']
    idx = context.user_data['question_index']
    question = questionnaire.get_question(idx)

    keyboard = [
        [InlineKeyboardButton(text, callback_data=f"answer_{value}")]
        for text, value in questionnaire.get_options()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.message.edit_text(question, reply_markup=reply_markup)
    else:
        await update.message.reply_text(question, reply_markup=reply_markup)


async def send_questionnaire_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    questionnaire = context.user_data['test']
    idx = context.user_data['question_index']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if idx == 0:
        intro_text = "–ö–∞–∫ —á–∞—Å—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏?"
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_questions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(intro_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(intro_text, reply_markup=reply_markup)
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
    question = questionnaire.get_question(idx - 1)  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ–ø–µ—Ä—å –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è

    keyboard = [
        [InlineKeyboardButton(text, callback_data=f"answer_{value}")]
        for text, value in questionnaire.get_options()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.message.edit_text(question, reply_markup=reply_markup)
    else:
        await update.message.reply_text(question, reply_markup=reply_markup)


async def emotions_period_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    checked_user = await check_user_consent(user_id)

    emotions_type = context.user_data.get('emotions_type')

    period_map = {
        "emotions_week": 7,
        "emotions_month": 30,
        "emotions_3months": 90,
        "emotions_year": 365
    }

    period_days = period_map.get(query.data, 7)
    period_name = query.data.replace("emotions_", "").replace("3months", "3 –º–µ—Å—è—Ü–∞")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        #stats = await get_emotions_stats(checked_user, period_days)
        stats = await get_emotions_stats(checked_user, period_days, emotions_type)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —ç–º–æ—Ü–∏–π

        if not stats:
            await query.edit_message_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–æ—Ü–∏—è—Ö –∑–∞ {period_name}")
            return

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        #chart = await create_emotions_chart(stats, period_name)
        chart = await create_emotions_chart(stats, period_name, emotions_type)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=chart,
            caption=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {'—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö' if emotions_type == 'text' else '–≥–æ–ª–æ—Å–æ–≤—ã—Ö'} —ç–º–æ—Ü–∏–π –∑–∞ {period_name}"
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.delete()

    except Exception as e:
        print(f"Error generating emotions chart: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    user_id = query.from_user.id
    checked_user = await check_user_consent(user_id)
    #new
    if data == "start_questions":
        context.user_data['question_index'] = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await send_questionnaire_question(update, context)
        return

    if data.startswith("start_"):
        test_name = data.split("_")[1]
        questionnaire = PHQ9 if test_name == "PHQ9" else GAD7

        context.user_data['test'] = questionnaire
        context.user_data['score'] = 0
        context.user_data['question_index'] = 0
        context.user_data['phq9_short_check_done'] = False

        await send_questionnaire_question(update, context)

    elif data.startswith("answer_"):
        score = int(data.split("_")[1])
        context.user_data['score'] += score
        context.user_data['question_index'] += 1
        questionnaire = context.user_data['test']
        index = context.user_data['question_index']

        # –†–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ PHQ-9
        if questionnaire.name.startswith("PHQ") and not context.user_data.get("phq9_short_check_done"):
            if index == 3:
                context.user_data['phq9_short_check_done'] = True
                total = context.user_data['score']

                if total < 2 or total >= 4:

                    interpretation = "–î–µ–ø—Ä–µ—Å—Å–∏—è –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–∞." if total < 2 else "–í–æ–∑–º–æ–∂–Ω–∞ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è"

                    await query.message.edit_text(
                        f"‚úÖ –¢–µ—Å—Ç *{questionnaire.name}* –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                        f"–í–∞—à –±–∞–ª–ª: *{total}*\n\n"
                        f"{interpretation}",
                        parse_mode="Markdown"
                    )

                    phq_results = f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ PHQ-2: {total} –±–∞–ª–ª–∞" + interpretation

                    if checked_user:
                        await save_test_result(checked_user, "phq_2", total)
                        full_profile = await get_formatted_profile_from_db(checked_user)
                    else:
                        full_profile = None

                    #response = generate_response_for_emotion(phq_results=phq_results, profile=full_profile)

                    response, emotions = generate_empathic_response(phq_results=phq_results, profile=full_profile)

                    await query.message.reply_text(response)
                return

        if index < len(questionnaire.questions)+1:
            await send_questionnaire_question(update, context)
        else:
            total = context.user_data['score']
            interpretation = questionnaire.interpret_result(total)

            test_type = "phq_9" if questionnaire == PHQ9 else "gad_7"

            await query.message.edit_text(
                f"‚úÖ –¢–µ—Å—Ç *{questionnaire.name}* –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                f"–í–∞—à –±–∞–ª–ª: *{total}*\n\n"
                f"{interpretation}",
                parse_mode="Markdown"
                # reply_markup=main_keyboard
            )
            results = f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ {questionnaire.name}: {total} –±–∞–ª–ª–∞" + interpretation
            if checked_user:
                await save_test_result(checked_user, test_type, total)
                full_profile = await get_formatted_profile_from_db(checked_user)
            else:
                full_profile = None

            if questionnaire == PHQ9:
                #response = generate_response_for_emotion(phq_results=results,
                #                                         profile=full_profile
                #                                         )
                response, emotions = generate_empathic_response(phq_results=results, profile=full_profile)
            else:
                #response = generate_response_for_emotion(gad_results=results,
                #                                         profile=full_profile
                #                                         )
                response, emotions = generate_empathic_response(gad_results=results, profile=full_profile)

            await query.message.reply_text(response)

            # await query.message.reply_text(
            #    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            #    reply_markup=main_keyboard
            # )
    elif data == "consent_yes":
        user_id = update.effective_user.id
        await save_user_consent(user_id)
        reply_markup = send_personalized_keyboard(is_checked=True)
        await query.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!",
            parse_mode="Markdown",
        )
        await query.message.reply_text(
            "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞",
            reply_markup=reply_markup
        )
    elif data == "consent_revoke":
        user_id = update.effective_user.id
        await delete_user_consent(user_id)

        checked_user = await check_user_consent(user_id)

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        tests_exists = await check_test_results_exist(checked_user)
        if tests_exists:
            await delete_test_results(checked_user)
        emotions_exists = await check_emotions_exist(checked_user)
        if emotions_exists:
            await delete_user_emotions(checked_user)
        profile_exists = await check_user_profile_exist(checked_user)
        if profile_exists:
            await delete_profile_from_db(checked_user)

        # await confirm_delete_profile(update, context)
        reply_markup = send_personalized_keyboard(is_checked=False)
        await query.message.edit_text(
            "‚ùå –í—ã –æ—Ç–æ–∑–≤–∞–ª–∏ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ. –î–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.",
            parse_mode="Markdown",
        )
        await query.message.reply_text(
            "–í–∞—à –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–∞–∫–∂–µ —Å—Ç–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: –Ω–µ–ª—å–∑—è —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç",
            reply_markup=reply_markup
        )


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.message.from_user.id
    checked_user = await check_user_consent(user_id)

    voice = update.message.voice
    file = await context.bot.get_file(voice.file_id)

    ogg_path = os.path.abspath(f"voice_{voice.file_id}.ogg")
    wav_path = os.path.abspath(f"voice_{voice.file_id}.wav")

    await file.download_to_drive(ogg_path)

    if not os.path.exists(ogg_path):
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return

    try:
        if not os.path.exists(ogg_path):
            await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.")
            return
        convert_ogg_to_wav(ogg_path, wav_path)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return

    try:
        voice_emotion = predict_emotion(wav_path)

        if not os.path.exists(wav_path):
            await update.message.reply_text("–§–∞–π–ª WAV –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            return
        else:
            print("–§–∞–π–ª WAV –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
        transcription = transcribe_speech(wav_path)

        await update.message.reply_text(
            f"*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è (–∏–Ω—Ç–æ–Ω–∞—Ü–∏—è):* {voice_emotion}\n*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:* {transcription}",
            parse_mode="Markdown"
        )

        '''text_emotions = classificate_emotions(transcription)
        await update.message.reply_text(
            f"*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ (—Å–º—ã—Å–ª —Å–æ–æ–±—â–µ–Ω–∏—è):* {text_emotions}",
            parse_mode="Markdown"
        )

        # user_id = update.message.from_user.id

        text_emotions = text_emotions.split(", ")
        text_emotions_lower = [em.lower() for em in text_emotions]'''

        if checked_user:
            '''await save_emotions_to_db(
                user_id=checked_user,
                text_emotions=text_emotions_lower,
                voice_emotions=[voice_emotion]
            )'''
            full_profile = await get_formatted_profile_from_db(checked_user)
        else:
            full_profile = None

        if full_profile is not None:
            await update.message.reply_text(
                f"*–ü—Ä–æ—Ñ–∏–ª—å:* {full_profile}",
                parse_mode="Markdown"
            )

        '''response = generate_response_for_emotion(transcription,
                                                 text_emotions=text_emotions,
                                                 voice_emotion=voice_emotion,
                                                 profile=full_profile
                                                 )'''
        response, emotions = generate_empathic_response(transcription,
                                                        #text_emotions=text_emotions,
                                                        voice_emotion=voice_emotion,
                                                        profile=full_profile)
        if checked_user:
            await save_emotions_to_db(
                user_id=checked_user,
                text_emotions=emotions,
                voice_emotions=[voice_emotion]
            )

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
    finally:
        if os.path.exists(ogg_path):
            os.remove(ogg_path)
        if os.path.exists(wav_path):
            os.remove(wav_path)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.message.from_user.id
    checked_user = await check_user_consent(user_id)

    if 'profile' in context.user_data:
        if checked_user:
            await handle_profile_response(update, context, checked_user)
            return
        else:
            await update.message.reply_text(
                f"""–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞""",
                parse_mode="Markdown"
            )

    if text == "üìã –ü—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å":
        if checked_user:
            await start_psychographic_profile(update, context, checked_user)
            return
        else:
            await update.message.reply_text(
                f"""–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç, 
                —Ç–∞–∫ –∫–∞–∫ –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö""",
                parse_mode="Markdown"
            )
            return

    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å":
        if checked_user:
            context.user_data["checked_user"] = checked_user
            await confirm_delete_profile(update, context, user_id=checked_user)
            return
        else:
            await update.message.reply_text(
                f"""–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç, 
                —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ–≥–æ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∏""",
                parse_mode="Markdown"
            )
            return

    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤":
        if checked_user:
            context.user_data["checked_user"] = checked_user
            await confirm_delete_tests_request(update, context, user_id=checked_user)
            return
        else:
            await update.message.reply_text(
                f"""–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤, 
                —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ""",
                parse_mode="Markdown"
            )
            return

    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π":
        if checked_user:
            context.user_data["checked_user"] = checked_user
            await confirm_delete_emotions_request(update, context, user_id=checked_user)
            return
        else:
            await update.message.reply_text(
                f"""–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π, 
                —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ""",
                parse_mode="Markdown"
            )
            return

    if text == "–ú–æ–∏ —ç–º–æ—Ü–∏–∏: –∏—Å—Ç–æ—Ä–∏—è":
        if not checked_user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="Markdown"
            )
            return

        context.user_data["checked_user"] = checked_user
        if not await check_emotions_exist(checked_user):
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏",
                parse_mode="Markdown"
            )
            return

        keyboard = [
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏", callback_data="emotions_type_text")],
            [InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏", callback_data="emotions_type_voice")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return

    if text == "–ú–æ–∏ —Ç–µ—Å—Ç—ã: –∏—Å—Ç–æ—Ä–∏—è":
        await handle_tests_history(update, context)
        '''if not checked_user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="Markdown"
            )
            return

        context.user_data["checked_user"] = checked_user
        if not await check_emotions_exist(checked_user):
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
                parse_mode="Markdown"
            )
            return

        keyboard = [
            [InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="tests_period_week")],
            [InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="tests_period_month")],
            [InlineKeyboardButton("–ó–∞ 3 –º–µ—Å—è—Ü–∞", callback_data="tests_period_3months")],
            [InlineKeyboardButton("–ó–∞ –≥–æ–¥", callback_data="tests_period_year")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤:",
            reply_markup=reply_markup
        )'''
        return

    if text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é":
        questionnaire = PHQ9
    elif text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å":
        questionnaire = GAD7
    else:
        '''text_emotions = classificate_emotions(text)

        await update.message.reply_text(
            f"*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ (—Å–º—ã—Å–ª —Å–æ–æ–±—â–µ–Ω–∏—è):* {text_emotions}",
            parse_mode="Markdown"
        )

        text_emotions = text_emotions.split(", ")
        text_emotions_lower = [emotion.lower() for emotion in text_emotions]

        if checked_user:
            await save_emotions_to_db(
                user_id=checked_user,
                text_emotions=text_emotions_lower,
                voice_emotions=[]
            )
            full_profile = await get_formatted_profile_from_db(checked_user)
        else:
            full_profile = None

        if full_profile is not None:
            await update.message.reply_text(
                f"*–ü—Ä–æ—Ñ–∏–ª—å:* {full_profile}",
                parse_mode="Markdown"
            )

        response = generate_response_for_emotion(text, text_emotions=text_emotions, profile=full_profile)'''
        if checked_user:
            full_profile = await get_formatted_profile_from_db(checked_user)
        else:
            full_profile = None
        response, emotions = generate_empathic_response(text, profile=full_profile)
        print(emotions)
        if checked_user:
            await save_emotions_to_db(
                user_id=checked_user,
                text_emotions=emotions,
                voice_emotions=[]
            )
        await update.message.reply_text(response)

    context.user_data['test'] = questionnaire
    context.user_data['score'] = 0
    context.user_data['question_index'] = 0
    context.user_data['phq9_short_check_done'] = False

    reply_keyboard = send_personalized_keyboard(is_checked=False)
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç *{questionnaire.name}*", parse_mode="Markdown",
                                    reply_markup=reply_keyboard)
    await send_questionnaire_question(update, context)


async def emotions_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–º–æ—Ü–∏–π"""
    query = update.callback_query
    await query.answer()
    print(query.data.split('_')[-1])

    context.user_data['emotions_type'] = query.data.split('_')[-1]

    keyboard = [
        [InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="emotions_period_week")],
        [InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="emotions_period_month")],
        [InlineKeyboardButton("–ó–∞ 3 –º–µ—Å—è—Ü–∞", callback_data="emotions_period_3months")],
        [InlineKeyboardButton("–ó–∞ –≥–æ–¥", callback_data="emotions_period_year")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=reply_markup
    )


async def handle_tests_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    user_id = update.message.from_user.id
    checked_user = await check_user_consent(user_id)

    if not checked_user:
        await update.message.reply_text(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö",
            parse_mode="Markdown"
        )
        return

    if not await check_test_results_exist(checked_user):
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
            parse_mode="Markdown"
        )
        return

    keyboard = [
        [InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="tests_period_week")],
        [InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="tests_period_month")],
        [InlineKeyboardButton("–ó–∞ 3 –º–µ—Å—è—Ü–∞", callback_data="tests_period_3months")],
        [InlineKeyboardButton("–ó–∞ –≥–æ–¥", callback_data="tests_period_year")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤:",
        reply_markup=reply_markup
    )


async def tests_period_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    checked_user = await check_user_consent(user_id)

    period_map = {
        "tests_week": 7,
        "tests_month": 30,
        "tests_3months": 90,
        "tests_year": 365
    }

    period_days = period_map.get(query.data, 30)
    period_name = query.data.replace("tests_period", "").replace("3months", "3 –º–µ—Å—è—Ü–∞")

    try:
        chart = await create_tests_chart(checked_user, period_days)

        if not chart:
            await query.edit_message_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–∞—Ö –∑–∞ {period_name}")
            return

        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=chart,
            caption=f"–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∑–∞ {period_name}"
        )

        await query.message.delete()

    except Exception as e:
        print(f"Error generating tests chart: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")


def main():

    application = ApplicationBuilder().token(TELEBOT_API_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(CallbackQueryHandler(handle_profile_delete_callback, pattern="^delete_profile_"))
    application.add_handler(CallbackQueryHandler(handle_delete_tests_callback, pattern="^delete_tests_"))
    application.add_handler(CallbackQueryHandler(handle_delete_emotions_callback, pattern="^delete_emotions_"))
    application.add_handler(CallbackQueryHandler(emotions_type_callback, pattern="^emotions_type_"))
    application.add_handler(CallbackQueryHandler(emotions_period_callback, pattern="^emotions_period_"))
    application.add_handler(CallbackQueryHandler(tests_period_callback, pattern="^tests_period_"))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_response))
    application.add_handler(MessageHandler(filters.Text("–ú–æ–∏ —ç–º–æ—Ü–∏–∏: –∏—Å—Ç–æ—Ä–∏—è"), handle_message))
    application.add_handler(MessageHandler(filters.Text("–ú–æ–∏ —Ç–µ—Å—Ç—ã: –∏—Å—Ç–æ—Ä–∏—è"), handle_tests_history))

    application.add_handler(CommandHandler("profile", start_psychographic_profile))
    application.add_handler(CommandHandler("delete_profile", confirm_delete_profile))
    application.add_handler(CommandHandler("edit_privacy", edit_privacy))
    application.add_handler(CommandHandler("delete_user_tests", confirm_delete_tests_request))
    application.add_handler(CommandHandler("delete_emotions", confirm_delete_emotions_request))

    application.run_polling()


if __name__ == "__main__":
    main()
